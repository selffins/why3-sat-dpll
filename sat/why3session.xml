<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="sat.mlw"/>
<theory name="NumOf">
 <goal name="infix ==&#39;vc" expl="VC for infix ==">
 </goal>
 <goal name="numof_decreases&#39;vc" expl="VC for numof_decreases">
 </goal>
</theory>
<theory name="Sat">
 <goal name="infix ==&#39;vc" expl="VC for infix ==">
 </goal>
 <goal name="cnf&#39;vc" expl="VC for cnf">
 </goal>
 <goal name="extract_sat_valuation&#39;vc" expl="VC for extract_sat_valuation">
 </goal>
 <goal name="partial_eval_clause&#39;vc" expl="VC for partial_eval_clause">
 </goal>
 <goal name="partial_eval_cnf&#39;vc" expl="VC for partial_eval_cnf">
 <transf name="split_vc" >
  <goal name="partial_eval_cnf&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.018977" steps="3708"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.015436" steps="3710"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.036049" steps="56207"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.035113" steps="62114"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.033498" steps="62650"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.018580" steps="4866"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.020124" steps="4868"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="partial_eval_cnf&#39;vc.7.0" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.114484" steps="854"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.7.1" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.036132" steps="72269"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.7.2" expl="loop invariant preservation" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.373681" steps="2672"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.357287" steps="3341"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.9" expl="exceptional postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.018769" steps="4951"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.019214" steps="4871"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.020470" steps="4873"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.12" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="partial_eval_cnf&#39;vc.12.0" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.023793" steps="32463"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.12.1" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.021532" steps="32463"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.12.2" expl="loop invariant preservation">
   <proof prover="0" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="163313"/></proof>
   <proof prover="2" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="2637435"/></proof>
   <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="4368514"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.020507" steps="4608"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.019806" steps="4477"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.090703" steps="184138"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.16" expl="out of loop bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.031607" steps="54806"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="backtrack&#39;vc" expl="VC for backtrack">
 </goal>
 <goal name="set_value&#39;vc" expl="VC for set_value">
 </goal>
 <goal name="sat_aux&#39;vc" expl="VC for sat_aux">
 </goal>
 <goal name="sat&#39;vc" expl="VC for sat">
 </goal>
 <goal name="test1&#39;vc" expl="VC for test1">
 </goal>
</theory>
<theory name="UnitSat">
 <goal name="infix ==&#39;vc" expl="VC for infix ==" proved="true">
 <proof prover="0"><result status="valid" time="0.011023" steps="2"/></proof>
 </goal>
 <goal name="cnf&#39;vc" expl="VC for cnf" proved="true">
 <proof prover="2"><result status="valid" time="0.022786" steps="36635"/></proof>
 </goal>
 <goal name="extract_sat_valuation&#39;vc" expl="VC for extract_sat_valuation" proved="true">
 <proof prover="3" timelimit="1"><result status="valid" time="0.154709" steps="35169"/></proof>
 </goal>
 <goal name="partial_eval_clause&#39;vc" expl="VC for partial_eval_clause">
 <transf name="split_vc" >
  <goal name="partial_eval_clause&#39;vc.0" expl="index in array bounds" proved="true">
  <proof prover="2"><result status="valid" time="0.028528" steps="66698"/></proof>
  </goal>
  <goal name="partial_eval_clause&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.019302" steps="50656"/></proof>
  </goal>
  <goal name="partial_eval_clause&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.022078" steps="49677"/></proof>
  </goal>
  <goal name="partial_eval_clause&#39;vc.3" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.023292" steps="53588"/></proof>
  </goal>
  <goal name="partial_eval_clause&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.023015" steps="52545"/></proof>
  </goal>
  <goal name="partial_eval_clause&#39;vc.5" expl="postcondition">
  <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="12170"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.000000" steps="2223856"/></proof>
  <proof prover="3" timelimit="1" obsolete="true"><result status="timeout" time="1.000000" steps="454471"/></proof>
  <transf name="split_vc" >
   <goal name="partial_eval_clause&#39;vc.5.0" expl="postcondition">
   <proof prover="0"><result status="timeout" time="5.000000" steps="57901"/></proof>
   <proof prover="2" timelimit="5"><result status="timeout" time="5.000000" steps="1750383"/></proof>
   <proof prover="3"><result status="timeout" time="5.000000" steps="1786604"/></proof>
   </goal>
   <goal name="partial_eval_clause&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="1"><result status="valid" time="0.287315" steps="3497"/></proof>
   </goal>
   <goal name="partial_eval_clause&#39;vc.5.2" expl="postcondition">
   <proof prover="0"><result status="timeout" time="5.000000" steps="73754"/></proof>
   <proof prover="2" timelimit="5"><result status="timeout" time="5.000000" steps="2052084"/></proof>
   <proof prover="3"><result status="timeout" time="5.000000" steps="2038439"/></proof>
   </goal>
   <goal name="partial_eval_clause&#39;vc.5.3" expl="postcondition">
   <proof prover="0"><undone/></proof>
   <proof prover="2" timelimit="5"><undone/></proof>
   <proof prover="3"><undone/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partial_eval_clause&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.013176" steps="4694"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="partial_eval_cnf&#39;vc" expl="VC for partial_eval_cnf">
 <transf name="split_vc" >
  <goal name="partial_eval_cnf&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.015052" steps="3196"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.015156" steps="3198"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.012592" steps="31"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.024998" steps="62153"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.020440" steps="62682"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.5" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.038940" steps="12165"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.011998" steps="30"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="partial_eval_cnf&#39;vc.7.0" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="0.466198" steps="4413"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.7.1" expl="loop invariant preservation" proved="true">
   <proof prover="2" timelimit="5"><result status="valid" time="0.032473" steps="70146"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.7.2" expl="loop invariant preservation" proved="true">
   <proof prover="2" timelimit="5"><result status="valid" time="0.083834" steps="192617"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.7.3" expl="loop invariant preservation" proved="true">
   <proof prover="0"><result status="valid" time="1.253459" steps="7882"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.8" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.265090" steps="2861"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.9" expl="exceptional postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.018951" steps="4862"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.10" expl="assertion">
  <proof prover="0" timelimit="1"><result status="timeout" time="1.000000" steps="12657"/></proof>
  <proof prover="2"><result status="timeout" time="1.000000" steps="2571013"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="558137"/></proof>
  <transf name="split_vc" >
   <goal name="partial_eval_cnf&#39;vc.10.0" expl="assertion">
   <proof prover="0"><result status="timeout" time="5.000000" steps="105994"/></proof>
   <proof prover="2" timelimit="5"><result status="timeout" time="5.000000" steps="2562959"/></proof>
   <proof prover="3"><result status="timeout" time="5.000000" steps="2100067"/></proof>
   </goal>
  </transf>
  <transf name="split_vc" >
   <goal name="partial_eval_cnf&#39;vc.10.0" expl="assertion">
   <proof prover="0" memlimit="2000"><result status="timeout" time="5.000000" steps="81940"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="2563211"/></proof>
   <proof prover="3" memlimit="2000"><result status="timeout" time="5.000000" steps="2100067"/></proof>
   <transf name="inline_goal" >
    <goal name="partial_eval_cnf&#39;vc.10.0.0" expl="assertion">
    <transf name="split_all_full" >
     <goal name="partial_eval_cnf&#39;vc.10.0.0.0" expl="VC for partial_eval_cnf">
     <proof prover="0" timelimit="1"><result status="timeout" time="1.000000" steps="11272"/></proof>
     <proof prover="2"><result status="timeout" time="1.000000" steps="2301062"/></proof>
     <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="354268"/></proof>
     <transf name="split_vc" >
      <goal name="partial_eval_cnf&#39;vc.10.0.0.0.0" expl="VC for partial_eval_cnf">
      <proof prover="0" memlimit="2000"><result status="timeout" time="5.000000" steps="86518"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="2513476"/></proof>
      <proof prover="3" memlimit="2000"><result status="timeout" time="5.000000" steps="1931674"/></proof>
      <transf name="inline_goal" >
       <goal name="partial_eval_cnf&#39;vc.10.0.0.0.0.0" expl="VC for partial_eval_cnf">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="640316"/></proof>
       <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="2637271"/></proof>
       <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="10968733"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="partial_eval_cnf&#39;vc.10.0.0.1" expl="VC for partial_eval_cnf">
     <proof prover="0" timelimit="1"><result status="timeout" time="1.000000" steps="11735"/></proof>
     <proof prover="2"><result status="timeout" time="1.000000" steps="1978530"/></proof>
     <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="488859"/></proof>
     <transf name="split_vc" >
      <goal name="partial_eval_cnf&#39;vc.10.0.0.1.0" expl="VC for partial_eval_cnf">
      <proof prover="0" memlimit="2000"><result status="timeout" time="5.000000" steps="66308"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="2594413"/></proof>
      <proof prover="3" memlimit="2000"><result status="timeout" time="5.000000" steps="2613261"/></proof>
      <transf name="inline_goal" >
       <goal name="partial_eval_cnf&#39;vc.10.0.0.1.0.0" expl="VC for partial_eval_cnf">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="713690"/></proof>
       <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="2632209"/></proof>
       <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="11732523"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.11" expl="exceptional postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.015366" steps="4915"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.016735" steps="32"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.048232" steps="12183"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.14" expl="loop invariant preservation">
  <proof prover="0" timelimit="1"><result status="timeout" time="1.000000" steps="5748"/></proof>
  <proof prover="2"><result status="timeout" time="1.000000" steps="2139079"/></proof>
  <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="368128"/></proof>
  <transf name="split_vc" >
   <goal name="partial_eval_cnf&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.021665" steps="31580"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.14.1" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.018687" steps="31580"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.14.2" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.030443" steps="72578"/></proof>
   </goal>
   <goal name="partial_eval_cnf&#39;vc.14.3" expl="loop invariant preservation">
   <transf name="inline_goal" >
    <goal name="partial_eval_cnf&#39;vc.14.3.0" expl="loop invariant preservation">
    <transf name="split_all_full" >
     <goal name="partial_eval_cnf&#39;vc.14.3.0.0" expl="VC for partial_eval_cnf">
     <proof prover="0" timelimit="1"><result status="timeout" time="1.000000" steps="4690"/></proof>
     <proof prover="2"><result status="timeout" time="1.000000" steps="1813993"/></proof>
     <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="288539"/></proof>
     <transf name="split_vc" >
      <goal name="partial_eval_cnf&#39;vc.14.3.0.0.0" expl="VC for partial_eval_cnf">
      <proof prover="0" memlimit="2000"><result status="timeout" time="5.000000" steps="33396"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="2545429"/></proof>
      <proof prover="3" memlimit="2000"><result status="timeout" time="5.000000" steps="1559117"/></proof>
      <transf name="inline_goal" >
       <goal name="partial_eval_cnf&#39;vc.14.3.0.0.0.0" expl="VC for partial_eval_cnf">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="211879"/></proof>
       <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="2580984"/></proof>
       <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="9685683"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="partial_eval_cnf&#39;vc.14.3.0.1" expl="VC for partial_eval_cnf">
     <proof prover="0" timelimit="1"><result status="timeout" time="1.000000" steps="4469"/></proof>
     <proof prover="2"><result status="timeout" time="1.000000" steps="1719900"/></proof>
     <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="286541"/></proof>
     <transf name="split_vc" >
      <goal name="partial_eval_cnf&#39;vc.14.3.0.1.0" expl="VC for partial_eval_cnf">
      <proof prover="0" memlimit="2000"><result status="timeout" time="5.000000" steps="28683"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="2545503"/></proof>
      <proof prover="3" memlimit="2000"><result status="timeout" time="5.000000" steps="1670792"/></proof>
      <transf name="inline_goal" >
       <goal name="partial_eval_cnf&#39;vc.14.3.0.1.0.0" expl="VC for partial_eval_cnf">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="399396"/></proof>
       <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="2583844"/></proof>
       <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="11319009"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="partial_eval_cnf&#39;vc.14.3.0.2" expl="VC for partial_eval_cnf">
     <proof prover="0" timelimit="1"><result status="timeout" time="1.000000" steps="4546"/></proof>
     <proof prover="2"><result status="timeout" time="1.000000" steps="1894293"/></proof>
     <proof prover="3" timelimit="1"><result status="timeout" time="1.000000" steps="281787"/></proof>
     <transf name="split_vc" >
      <goal name="partial_eval_cnf&#39;vc.14.3.0.2.0" expl="VC for partial_eval_cnf">
      <proof prover="0" memlimit="2000"><result status="timeout" time="5.000000" steps="19996"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="2729352"/></proof>
      <proof prover="3" memlimit="2000"><result status="timeout" time="5.000000" steps="1794065"/></proof>
      <transf name="inline_goal" >
       <goal name="partial_eval_cnf&#39;vc.14.3.0.2.0.0" expl="VC for partial_eval_cnf">
       <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="117863"/></proof>
       <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="2852807"/></proof>
       <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="11195306"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.015655" steps="4531"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.014553" steps="4400"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.070822" steps="164336"/></proof>
  </goal>
  <goal name="partial_eval_cnf&#39;vc.18" expl="out of loop bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.016578" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="backtrack&#39;vc" expl="VC for backtrack">
 <transf name="split_vc" >
  <goal name="backtrack&#39;vc.0" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.023070" steps="52356"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.1" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.017363" steps="3699"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.2" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.022639" steps="51890"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.3" expl="index in array bounds">
  <proof prover="0" timelimit="1" obsolete="true"><result status="valid" time="0.052986" steps="532"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.4" expl="variant decrease">
  <proof prover="2" obsolete="true"><result status="valid" time="0.025052" steps="57347"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.5" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.036580" steps="103157"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.6" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.026135" steps="52047"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.7" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.015941" steps="3765"/></proof>
  </goal>
  <goal name="backtrack&#39;vc.8" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.024353" steps="51103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_and_propagate&#39;vc" expl="VC for set_and_propagate">
 </goal>
 <goal name="sat&#39;vc" expl="VC for sat">
 </goal>
</theory>
</file>
</why3session>
