module Sat
type var = int
type lit = { var : var ; sign : bool }
type clause = list lit
type cnf = { clauses : array clause ; nvars : int }
type valuation = array bool
type pval = array (option bool)

let extract_sat_valuation (pval : pval) (ghost cnf : cnf) : valuation =
    let valuation = Array.make (length pval) True in
    for i = 0 to length pval - 1 do
        match pval[i] with
            | None      -> ()
            | Some b    -> valuation[i] <- b
        end        
    done;
    valuation

type clause_status =
  | Satisfied
  | Conflicting
  | Unresolved

type cnf_status =
  | Sat
  | Conflict
  | Other

exception Sat_found
exception Conflict_found
    
let rec partial_eval_clause (pval : pval) (c : clause) : clause_status =
    match c with
    |   Nil         ->  Conflicting 
    |   Cons l c'   ->  match pval[l.var] with
                        | None   -> match partial_eval_clause pval c' with
                                    |  Satisfied -> Satisfied
                                    |  _ -> Unresolved
                                    end
                        | Some b -> if b == l.sign then Satisfied else partial_eval_clause pval c'
                        end
    end  

let partial_eval_cnf (p : pval) (cnf : cnf) : cnf_status =
    let acc = ref Sat in
    for i = 0 to length cnf.clauses - 1 do
            match !acc with
            | Sat      -> p_sat_i p cnf i
            | Conflict -> p_con_i p cnf i
            | Other    -> p_oth_i p cnf i
            end
        }
        match partial_eval_clause p cnf.clauses[i] with
           | Satisfied    -> ()
           | Conflicting  ->  raise Conflict_found 
           | Unresolved   -> acc := Other
       end
    done;
    !acc
    
let rec backtrack (diff : list var) (pval : pval) (ghost old_pval : pval) : () =
     match diff with
     |  Nil          -> ()
     |  Cons x diff' -> pval[x] <- None ;
                        backtrack diff' pval old_pval
     end

let set_value (l : lit) (pval : pval) (cnf : cnf) : (bool, list var) =   
    let _ = if l.var < length pval then pval[l.var] <- Some l.sign else () in
    try
        let r = partial_eval_cnf pval cnf in
        match r with 
        | Sat      -> raise Sat_found
        | Conflict ->  raise Conflict_found
        | Other    -> (False, Cons l.var Nil)
        end
    with
        | Conflict_found -> (True, Cons l.var Nil)
    end

let next_var (n : var)  =
    n + 1

let rec sat_aux (cnf : cnf) (pval : pval) (v : var) (ghost old_pval : pval) =
    let old_old_pval = Array.copy old_pval in
    let old_pval = Array.copy pval in
    if v = length pval then () else (
    (
    let (conflict, diff) = set_value { var = v ; sign = true } pval cnf in
       if not conflict
       then sat_aux cnf pval (next_var v) old_pval
       else backtrack diff pval old_pval
    );
    (
    let (conflict, diff) = set_value { var = v ; sign = false } pval cnf in
        if not conflict
        then sat_aux cnf pval (next_var v) old_pval
        else
            (backtrack diff pval old_pval); (sat_aux cnf pval (v-1) old_old_pval)
    )
    )

let sat (cnf : cnf) : option valuation = 
    let pval = Array.make cnf.nvars None in
    let old_pval = Array.make cnf.nvars None in
    try
        let _ = sat_aux cnf pval 0 old_pval in
        None
    with
        | Sat_found -> Some (extract_sat_valuation pval cnf)
    end

